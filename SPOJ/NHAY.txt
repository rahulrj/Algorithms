#include<stdio.h>
#include<string.h>
#include<cstdlib>
#include <iostream>

using namespace std;


void computeLPSArray(string pat, long long int M, long long int *lps);
//int flag=0;

void KMPSearch(string pat, string txt)
{
    long long int M = pat.length();
    long long int N = txt.length();

    // create lps[] that will hold the longest prefix suffix
    // values for pattern
    long long int *lps = (long long int *)malloc(sizeof(long long int)*M);
    long long int j  = 0;  // index for pat[]

    // Preprocess the pattern (calculate lps[] array)
    computeLPSArray(pat, M, lps);

    long long int i = 0;  // index for txt[]
    while (i < N)
    {
      if (pat[j] == txt[i])
      {
        j++;
        i++;
      }

      if (j == M)
      {
        cout<<(i-j)<<endl;
        //flag=1;
        j = lps[j-1];
      }

      // mismatch after j matches
      else if (i < N && pat[j] != txt[i])
      {
        // Do not match lps[0..lps[j-1]] characters,
        // they will match anyway
        if (j != 0)
         j = lps[j-1];
        else
         i = i+1;
      }
    }
    free(lps); // to avoid memory leak
}

void computeLPSArray(string pat, long long int M, long long int *lps)
{
    long long int len = 0;  // length of the previous longest prefix suffix
    long long int i;

    lps[0] = 0; // lps[0] is always 0
    i = 1;

    // the loop calculates lps[i] for i = 1 to M-1
    while (i < M)
    {
       if (pat[i] == pat[len])
       {
         len++;
         lps[i] = len;
         i++;
       }
       else // (pat[i] != pat[len])
       {
         if (len != 0)
         {
           // This is tricky. Consider the example
           // AAACAAAA and i = 7.
           len = lps[len-1];

           // Also, note that we do not increment i here
         }
         else // if (len == 0)
         {
           lps[i] = 0;
           i++;
         }
       }
    }
}

// Driver program to test above function
int main()
{
   string  line;
  while (getline(std::cin, line))
{
	//int n;
	//cin>>n;
	//flag=0;
	 string pat,txt;
   getline(cin,pat);
   getline(cin,txt);


   KMPSearch(pat, txt);
   //if(flag==0)
   cout<<endl;

}


   return 0;
}
